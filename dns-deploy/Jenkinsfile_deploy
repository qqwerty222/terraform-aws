pipeline {

    agent {label 'terraform'}
    // triggers { pollSCM('* * * * *') }
    environment {
        TF_VAR_PROJECT_NAME="dns-deploy"
        
        TF_VAR_AWS_ACCESS_KEY=credentials('aws_access_key')
        TF_VAR_AWS_SECRET_KEY=credentials('aws_secret_key')
        TF_VAR_AWS_AVAILABILITY_ZONE="eu-central-1b"
        TF_VAR_AWS_REGION="eu-central-1"
        
        TF_VAR_CONSUL_DC="dc1"
        TF_VAR_CONSUL_IP="10.0.2.15:8500"
        TF_VAR_CONSUL_TOKEN=credentials('consul_token')
        
        TF_VAR_PUBLIC_KEY=credentials('ssh_dns_pub')
    }
    
    stages { 
        stage('Prepare Terraform Codebase'){
            steps{
                cleanWs()
                checkout scm: [$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: 
                [[credentialsId: 'ssh-github', url: 'git@github.com:qqwerty222/terraform-aws.git' ]]]
            }
        }
        stage('Deploy network'){
            steps {
                dir('dns-deploy/network') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Deploy sec-groups ssh-keys'){
            steps {
                dir('dns-deploy/security_groups') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
                
                dir('dns-deploy/ssh_keys') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Deploy ec2'){
            steps {
                dir('dns-deploy/ec2') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Prepare Ansible Codebase'){
            steps{
                cleanWs()
                checkout scm: [$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: 
                [[credentialsId: 'ssh-github', url: 'git@github.com:qqwerty222/ansible-dns.git' ]]]
            }
        }
        stage('Generate config files'){
            steps {
                sh "consul kv get -http-addr=${TF_VAR_CONSUL_IP} /dns-deploy/ec2/hosts > hosts"
                sh "consul kv get -http-addr=${TF_VAR_CONSUL_IP} /dns-deploy/ec2/gvars_all > group_vars/all"
            }
        }
        stage('Invoke playbook'){
            steps {
                ansiblePlaybook( 
                playbook: 'playbook.yml',
                credentialsId: 'ssh-key',
                hostKeyChecking: false,
                )
            }
        }
    }
}